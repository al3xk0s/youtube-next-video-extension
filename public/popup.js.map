{
  "version": 3,
  "sources": ["../src/lib/operators.ts", "../src/lib/collections.ts", "../src/lib/url.ts", "../src/api/api_key.ts", "../src/api/lib/uriUtils.ts", "../src/api/YoutubeAPI.ts", "../src/api/seacher.ts", "../src/api/DataProvider.ts", "../src/lib/chromeAPI.ts", "../src/lib/youtube.ts", "../src/viewElements/display.ts", "../src/viewElements/targetButtons.ts", "../src/index.ts"],
  "sourcesContent": ["import { AnyNull } from \"./types\";\r\n\r\nexport const force = <T>(value: T | AnyNull) => {\r\n    if(value == null) throw new Error('Null operator used at null value');\r\n\r\n    return value!;\r\n};\r\n", "export const countStarting = <T>(array: T[], isTarget: (value: T) => boolean) => {\r\n    let isCounting = false;\r\n\r\n    let counter = 0;\r\n    for (const value of array) {\r\n        if(!isCounting) {\r\n            isCounting = isTarget(value);\r\n        }\r\n\r\n        if(!isCounting) continue;\r\n\r\n        counter++;\r\n    }\r\n\r\n    return counter;\r\n}\r\n\r\nexport const filterObject = <V = any>(obj: { [k: string]: V }, predicate: (key: string | number | symbol, value: V) => boolean) =>\r\n    Object.fromEntries(\r\n        Object.entries(obj).filter(([k, v]) => predicate(k, v))\r\n    );\r\n\r\nexport const mapObject = <V = any, M = any>(obj: { [k: string]: V }, mapper: (key: string | number | symbol, value: V) => [ string | number | symbol, M ]) =>\r\n    Object.fromEntries(\r\n        Object.entries(obj).map(([k, v]) => mapper(k, v))\r\n    );\r\n", "import { filterObject, mapObject } from \"./collections\";\r\n\r\nexport const createUrl = (base: string, { query }: { query?: ConstructorParameters<typeof URLSearchParams>[0] } = {}) =>\r\n    query == null\r\n        ? base\r\n        : base + '?' + new URLSearchParams(query).toString();\r\n\r\nexport const createQuery = (record: Record<string, any>, { removeNulls = true, removeEmptyStrings = true } : { removeNulls?: boolean, removeEmptyStrings?: boolean } = {}) => {\r\n    const firstStepResults = removeNulls\r\n        ? filterObject(record, (k, v) => v != null)\r\n        : Object.fromEntries(Object.entries(record));\r\n\r\n    const stringResults = mapObject<any, string>(\r\n        firstStepResults,\r\n        (k, v) => ([k, v.toString()]),\r\n    );\r\n\r\n    return removeEmptyStrings\r\n        ? filterObject(stringResults, (k, v) => v !== '')\r\n        : stringResults;\r\n}\r\n", "export const API_KEY : string = 'AIzaSyCPAwaW5np0QPDc3gTdfLTYQkAL9lDIdKU';\r\n", "export const joinParams = (...parts: string[]) => parts.join(',');\r\n", "import { force } from \"../lib/operators\";\r\nimport { createUrl, createQuery } from \"../lib/url\";\r\nimport { API_KEY } from \"./api_key\";\r\nimport { joinParams } from \"./lib/uriUtils\";\r\nimport { ChannelList, ChannelListParts } from \"./models/ChannelList\";\r\nimport { PlaylistItemList, PlaylistItemListParts } from \"./models/PlaylistItemList\";\r\nimport { SearchVideoList } from \"./models/SearchVideoList\";\r\nimport { VideoList, VideoListParts } from \"./models/VideoList\";\r\nimport { VideoSmall } from \"./models/VideoSmall\";\r\n\r\nexport const YouTubeAPI = (() => {\r\n    const validateRes = <T extends object>(res: T) => {\r\n        if('error' in res && res.error != null) {\r\n            const error = res.error as { message?: string, code?: string }\r\n\r\n            throw new Error(error.message + `(${error.code})`);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    const fetchResponse = async <T extends object>(url: string) => {\r\n        const res = await fetch(url);\r\n        const data = JSON.parse(await res.text()) as T;\r\n\r\n        return validateRes(data);\r\n    }\r\n\r\n    const createYoutubeQuery = (parts: string[], other?: Record<string, any>) => createQuery({\r\n        part: joinParams(...parts),\r\n        ...(other ?? {}),\r\n        key: API_KEY,\r\n    })\r\n\r\n    const getVideoList = (videosIDs: string[], parts: VideoListParts[] = ['snippet']) => {\r\n        const url = createUrl('https://youtube.googleapis.com/youtube/v3/videos', {\r\n            query: createYoutubeQuery(parts, {                \r\n                id: joinParams(...videosIDs),                \r\n            })\r\n        });\r\n\r\n        return fetchResponse<VideoList>(url);\r\n    }\r\n\r\n    const getSmallVideoList = (videosIDs: string[]) : Promise<VideoSmall[] | undefined> =>\r\n        getVideoList(videosIDs, ['snippet', 'contentDetails'])\r\n        .then(\r\n            res => res.items?.map(v => ({\r\n                    id: force(v.id) as string,\r\n                    channelID: force(v.snippet?.channelId),\r\n                    duration: force(v.contentDetails?.duration),\r\n                    published: force(v.snippet?.publishedAt),\r\n                }))\r\n        )\r\n\r\n    const getVideo = (videoID: string, parts: VideoListParts[] = ['snippet']) =>  getVideoList([videoID], parts).then(v => v?.items == null ? undefined : v?.items![0]);\r\n    const getSmallVideo = (videoID: string) => getSmallVideoList([videoID]).then(v => v == null ? undefined : v[0]);\r\n\r\n    type SearchQuery = {\r\n        maxResults?: number;\r\n        pageToken?: string;\r\n    }\r\n\r\n    type SearchVideosQuery = SearchQuery & {\r\n        order?: string;\r\n        publishedAfter?: string;\r\n        publishedBefore?: string;\r\n    }\r\n\r\n    const getSearchVideosList = (channelID: string, query: SearchVideosQuery = {}) => {\r\n        const url = createUrl('https://youtube.googleapis.com/youtube/v3/search', {\r\n            query: createYoutubeQuery(['snippet'], {\r\n                channelId: channelID,\r\n                type: 'video',                \r\n                ...query,\r\n            }),\r\n        });\r\n\r\n        return fetchResponse<SearchVideoList>(url);\r\n    }\r\n\r\n    const getChannelList = (channelID: string, parts: ChannelListParts[] = ['snippet']) => {\r\n        const url = createUrl('https://youtube.googleapis.com/youtube/v3/channels', {\r\n            query: createYoutubeQuery(parts, {\r\n                id: channelID,                \r\n            })\r\n        });\r\n\r\n        return fetchResponse<ChannelList>(url);\r\n    }\r\n\r\n    const getChannel = (channelID: string, parts: ChannelListParts[] = ['snippet']) => getChannelList(channelID, parts)\r\n        .then(res => res.items != null ? res.items[0] : undefined);\r\n\r\n    const getPlaylistItemList = (playlistID: string, parts: PlaylistItemListParts[] = ['snippet'], query: SearchQuery = {}) => {\r\n        const url = createUrl('https://youtube.googleapis.com/youtube/v3/playlistItems', {\r\n            query: {\r\n                ...createQuery(query),\r\n                ...createYoutubeQuery(parts, {\r\n                    playlistId: playlistID,\r\n                }),\r\n            }\r\n        });\r\n\r\n        return fetchResponse<PlaylistItemList>(url);\r\n    }\r\n\r\n    return {\r\n        getVideoList,\r\n        getSmallVideoList,\r\n        getVideo,\r\n        getSmallVideo,\r\n        getSearchVideosList,\r\n        getChannelList,\r\n        getChannel,\r\n        getPlaylistItemList,\r\n    }\r\n})()", "import { YouTubeAPI } from \"./YoutubeAPI\";\r\n\r\nexport type SearcherWorkerProps = {\r\n    maxResults?: number;\r\n    pageToken?: string;\r\n}\r\n\r\nexport type SearcherWorker<T, R> = {\r\n    exec: (props: SearcherWorkerProps) => Promise<T>;\r\n    tokenRetriever: (value: T) => string | undefined;\r\n    resultsRetriever: (value: T) => R[];\r\n}\r\n\r\nexport type CreateSearcherProps<T, R> = {\r\n    worker: SearcherWorker<T, R>;\r\n    maxResults?: number;\r\n    initialPageToken?: string;\r\n}\r\n\r\nexport const createVideosSearcher = <T, R>({\r\n    worker,\r\n    maxResults = 50,        \r\n    initialPageToken,\r\n}: CreateSearcherProps<T, R>) => {\r\n    let pageToken = initialPageToken;\r\n    let isFirst = true;\r\n\r\n    const searchNext = async () => {\r\n        const data = await worker.exec({maxResults, pageToken});                      \r\n\r\n        if(isFirst) {\r\n            isFirst = false;\r\n        }\r\n\r\n        pageToken = worker.tokenRetriever(data);\r\n\r\n        return worker.resultsRetriever(data);\r\n    }\r\n\r\n    return {\r\n        get pageToken() { return pageToken },\r\n        get hasNext() { return isFirst || pageToken != null },\r\n        get isFirst() { return isFirst },\r\n        searchNext,\r\n    }\r\n}\r\n", "import { YouTubeAPI } from \"./YoutubeAPI\";\r\nimport { createVideosSearcher } from \"./seacher\";\r\n\r\nexport const DataProvider = (() => {\r\n    const createPlaylistSearcher = (playlistID: string) => createVideosSearcher<Awaited<ReturnType<typeof YouTubeAPI['getPlaylistItemList']>>, string>({\r\n        worker: {\r\n            exec: (query) => YouTubeAPI.getPlaylistItemList(playlistID, ['contentDetails'], query),\r\n            tokenRetriever: (v) => v.nextPageToken,\r\n            resultsRetriever: (v) => v.items?.map(v => v.contentDetails!.videoId) ?? []\r\n        },\r\n    });\r\n\r\n    const getNextAndPreviousVideo = async (rootVideoID: string, playlistID: string) => {\r\n        const searcher = createPlaylistSearcher(playlistID);\r\n\r\n        const cache = [] as string[];\r\n\r\n        const getRootVideoIndex = () => cache.findIndex(v => v === rootVideoID);\r\n\r\n        const needStopSearch = () => {\r\n            const index = getRootVideoIndex();\r\n            if(index === -1) return false;\r\n\r\n            const rootIsNotLast = index < cache.length - 1;\r\n            return rootIsNotLast;\r\n        };\r\n\r\n        while(true) {\r\n            const results = await searcher.searchNext();\r\n            results.forEach(v => cache.push(v));\r\n\r\n            if(!searcher.hasNext || needStopSearch()) break;\r\n        }\r\n\r\n        const targetIndex = getRootVideoIndex();\r\n        if(targetIndex === -1 || cache.length === 0) throw new Error('Error of search current video');\r\n\r\n        const nextVideo = targetIndex > 0 ? cache[targetIndex - 1] : undefined;\r\n        const previousVideo = targetIndex < cache.length - 1 ? cache[targetIndex + 1] : undefined;\r\n\r\n        return {\r\n            nextVideo,\r\n            previousVideo,\r\n        };\r\n    }\r\n    \r\n    const getChannelInfoByVideo = async (videoID: string) : Promise<{ channelID: string, uploadsPlaylistID: string }> => {\r\n        const video = await YouTubeAPI.getVideo(videoID, ['snippet']);\r\n        const channelID = video?.snippet?.channelId;\r\n\r\n        if(channelID == null) throw new Error('Error of search channel');\r\n\r\n        const channel = await YouTubeAPI.getChannel(channelID, ['contentDetails']);\r\n        \r\n        const uploadsPlaylistID = channel?.contentDetails?.relatedPlaylists?.uploads;\r\n        if(uploadsPlaylistID == null) throw new Error('Error of fetch channel videos');\r\n\r\n        return {\r\n            channelID,\r\n            uploadsPlaylistID,\r\n        }\r\n    }    \r\n\r\n    return {\r\n        getChannelInfoByVideo,\r\n        getNextAndPreviousVideo,\r\n    }\r\n})();\r\n", "export const getActiveTabUrl = async () => {\r\n    const [tab] = await chrome.tabs.query({active: true, lastFocusedWindow: true});\r\n    return tab.url;\r\n}\r\n", "export const isYoutube = (url: string) => url.includes('youtube.com');\r\nexport const getVideoID = (url: string) => new URLSearchParams(new URL(url).search).get('v');\r\n\r\nexport const isVideo = (url: string) => getVideoID(url) != null;\r\n", "export const $display = (() => {\r\n    const el = document.querySelector('#text-display')!;\r\n\r\n    const setText = (value: string) => el.textContent = value.trim();\r\n    const setVariant = (variant: string) => {\r\n        el.classList.remove(\r\n            ...Array.from(el.classList.entries())\r\n                .map(([k, v]) => v)\r\n                .filter(v => v.includes('display-text')\r\n            )\r\n        );\r\n        el.classList.add(variant);\r\n    }\r\n\r\n    const text = (value: string) => {\r\n        setText(value);\r\n        setVariant('display-text');\r\n    };\r\n\r\n    const error = (value: string) => {\r\n        setText(value);\r\n        setVariant('display-text-error');\r\n    }\r\n\r\n    const initial = () => text('Previous, on playlist or next video')\r\n\r\n    return {\r\n        text,\r\n        error,\r\n        initial,\r\n    }\r\n})()\r\n", "export const $targetButtons = (() => {\r\n    const previousButton = document.querySelector('#video-previous') as HTMLButtonElement;\r\n    const nextButton = document.querySelector('#video-next') as HTMLButtonElement;\r\n    const toPlayListButton = document.querySelector('#playlist-video') as HTMLButtonElement;\r\n\r\n    const deactivate = () =>\r\n        [previousButton, nextButton, toPlayListButton].forEach(b => {\r\n            b.classList.replace('btn', 'buttons__button-inactive');\r\n            b.disabled = true;\r\n        });\r\n    \r\n    const activate = () =>\r\n        [previousButton, nextButton, toPlayListButton].forEach(b => {\r\n            b.classList.replace('buttons__button-inactive', 'btn');\r\n            b.disabled = false;\r\n        });\r\n\r\n    return {\r\n        deactivate,\r\n        activate,\r\n        nextButton,\r\n        previousButton,\r\n        toPlayListButton,\r\n    }\r\n})()\r\n", "import { DataProvider } from \"./api/DataProvider\";\r\nimport { getActiveTabUrl } from \"./lib/chromeAPI\";\r\nimport { createQuery, createUrl } from \"./lib/url\";\r\nimport { getVideoID, isVideo, isYoutube } from \"./lib/youtube\";\r\nimport { $display } from \"./viewElements/display\";\r\nimport { $targetButtons } from \"./viewElements/targetButtons\";\r\n\r\ntype Mode = 'next' | 'previous';\r\n\r\ntype Args = {\r\n    mode: Mode;\r\n}\r\n\r\nconst wrapFromErrorHandler = <F extends (...args: Parameters<F>) => ReturnType<F>>(exec: F) => {\r\n    return async (...args: Parameters<F>) : Promise<Awaited<ReturnType<F>> | undefined> => {\r\n        try {\r\n            return (await exec(...args) as Awaited<ReturnType<F>>);                    \r\n        } catch(e) {\r\n            $display.error((e as Error).message);\r\n        }\r\n    }\r\n}\r\n\r\nconst urlOpener = (() => {\r\n    const getBaseUrl = (url: string) => {\r\n        const tabUrl = new URL(url);\r\n        return tabUrl.origin + tabUrl.pathname;\r\n    }\r\n\r\n    const open = (url: string) => window.open(url, '_blank');\r\n\r\n    const openVideo = (url: string, id: string) =>\r\n        open(\r\n            createUrl(getBaseUrl(url), {\r\n                query: createQuery({ v: id }) \r\n            })\r\n        );\r\n\r\n    const openVideoOnPlayList = (url: string, id: string, playlistID: string) =>\r\n        open(\r\n            createUrl(getBaseUrl(url), {\r\n                query: createQuery({ v: id, list: playlistID }),\r\n            })\r\n        );\r\n\r\n    return { openVideo, openVideoOnPlayList }\r\n})();\r\n\r\nconst getUrlParams = async () => {\r\n    const url = new URLSearchParams(window.location.search).get('url') ?? await getActiveTabUrl();\r\n\r\n    if (!isYoutube(url) || !isVideo(url)) throw new Error('Is not youtube or video');\r\n\r\n    const videoID = getVideoID(url)!;\r\n\r\n    return { url, videoID }\r\n}\r\n\r\ntype VideoPair = Awaited<ReturnType<typeof DataProvider.getNextAndPreviousVideo>>;\r\n\r\nexport const getVideo = wrapFromErrorHandler(({ mode }: Args) => {\r\n    $display.initial();\r\n\r\n    const getTarget = ({ nextVideo, previousVideo }: VideoPair) => {\r\n        if(mode === 'next') return nextVideo;\r\n        if(mode === 'previous') return previousVideo;\r\n    }\r\n\r\n    const getValidateErrorMessage = () => {\r\n        if(mode === 'next') return 'It is last video';\r\n        if(mode === 'previous') return 'It is first video';\r\n    }\r\n\r\n    const validateResult = (target: string | undefined) => {        \r\n        if(target != null) return;\r\n        throw new Error(getValidateErrorMessage());\r\n    }\r\n\r\n    const main = async () => {\r\n        const { videoID, url } = await getUrlParams();\r\n        const { channelID, uploadsPlaylistID } = await DataProvider.getChannelInfoByVideo(videoID);\r\n\r\n        const targetVideo = getTarget(await DataProvider.getNextAndPreviousVideo(\r\n            videoID,\r\n            uploadsPlaylistID,\r\n        ));\r\n\r\n        validateResult(targetVideo);\r\n        urlOpener.openVideo(url, targetVideo!);\r\n    }\r\n\r\n    return main();\r\n});\r\n\r\nexport const toPlaylist = wrapFromErrorHandler(async () => {\r\n    $display.initial();\r\n    const { videoID, url } = await getUrlParams();\r\n\r\n    const { channelID, uploadsPlaylistID } = await DataProvider.getChannelInfoByVideo(videoID);\r\n\r\n    urlOpener.openVideoOnPlayList(url, videoID, uploadsPlaylistID);\r\n});\r\n\r\nconst subscribeTargetButtons = () => {\r\n    const { nextButton, previousButton, toPlayListButton } = $targetButtons;\r\n\r\n    const onTargetButtonClick = async (exec: () => Promise<any>) => {\r\n        $targetButtons.deactivate();\r\n        await exec();\r\n        $targetButtons.activate();\r\n    }\r\n\r\n   nextButton.addEventListener('click', () => onTargetButtonClick(() => getVideo({mode: 'next'})));\r\n   previousButton.addEventListener('click', () => onTargetButtonClick(() => getVideo({mode: 'previous'})));\r\n   toPlayListButton.addEventListener('click', () => onTargetButtonClick(toPlaylist));\r\n}\r\n\r\nconst init = async () => {\r\n    subscribeTargetButtons();\r\n\r\n    $display.initial();\r\n}\r\n\r\ninit();\r\n"],
  "mappings": "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",
  "names": ["force", "value", "filterObject", "obj", "predicate", "k", "v", "mapObject", "mapper", "createUrl", "base", "query", "createQuery", "record", "removeNulls", "removeEmptyStrings", "firstStepResults", "filterObject", "k", "v", "stringResults", "mapObject", "API_KEY", "joinParams", "parts", "YouTubeAPI", "validateRes", "res", "error", "fetchResponse", "url", "data", "createYoutubeQuery", "parts", "other", "createQuery", "joinParams", "API_KEY", "getVideoList", "videosIDs", "createUrl", "getSmallVideoList", "v", "force", "getVideo", "videoID", "getSmallVideo", "getSearchVideosList", "channelID", "query", "getChannelList", "playlistID", "createVideosSearcher", "worker", "maxResults", "initialPageToken", "pageToken", "isFirst", "data", "DataProvider", "createPlaylistSearcher", "playlistID", "createVideosSearcher", "query", "YouTubeAPI", "v", "videoID", "channelID", "uploadsPlaylistID", "rootVideoID", "searcher", "cache", "getRootVideoIndex", "needStopSearch", "index", "targetIndex", "nextVideo", "previousVideo", "getActiveTabUrl", "tab", "isYoutube", "url", "getVideoID", "isVideo", "$display", "el", "setText", "value", "setVariant", "variant", "k", "v", "text", "$targetButtons", "previousButton", "nextButton", "toPlayListButton", "b", "wrapFromErrorHandler", "exec", "args", "e", "$display", "urlOpener", "getBaseUrl", "url", "tabUrl", "open", "id", "createUrl", "createQuery", "playlistID", "getUrlParams", "getActiveTabUrl", "isYoutube", "isVideo", "videoID", "getVideoID", "getVideo", "mode", "getTarget", "nextVideo", "previousVideo", "getValidateErrorMessage", "validateResult", "target", "channelID", "uploadsPlaylistID", "DataProvider", "targetVideo", "toPlaylist", "subscribeTargetButtons", "nextButton", "previousButton", "toPlayListButton", "$targetButtons", "onTargetButtonClick", "init"]
}
