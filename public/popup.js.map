{
  "version": 3,
  "sources": ["../src/api/models/searchParts.ts", "../src/api/api.ts", "../src/api/lib/time/duration.ts", "../src/api/filters.ts", "../src/lib/chromeAPI.ts", "../src/lib/youtube.ts", "../src/repo/filterRepo.ts", "../src/viewElements/display.ts", "../src/lib/state.ts", "../src/viewElements/filterButton.ts", "../src/viewElements/targetButtons.ts", "../src/index.ts"],
  "sourcesContent": ["import { VideoResponse } from \"./video\";\r\n\r\nexport type SearchParts = Exclude<keyof VideoResponse, 'kind' | 'etag' | 'id'>;\r\n\r\nexport const joinParams = (...parts: string[]) => encodeURIComponent(parts.join(','));\r\n", "import { VideoFilter } from \"./filters\";\r\nimport { SearchResponse } from \"./models/search\";\r\nimport { SearchParts, joinParams } from \"./models/searchParts\";\r\nimport { VideoResponseSmall } from \"./models/video\";\r\n\r\nexport const youtubeAPI = (() => {\r\n    const API_KEY = 'AIzaSyDqLwyHMwUjZ2_Jni9E98cfjWlWAHdQfL8';\r\n\r\n    const getVideosResponse = async (videosIDs: string[], parts: SearchParts[] = ['snippet']) => {\r\n        const url = `https://youtube.googleapis.com/youtube/v3/videos?part=${joinParams(...parts)}&id=${joinParams(...videosIDs)}&key=${API_KEY}`;\r\n\r\n        const res = await fetch(url);\r\n        const data = JSON.parse(await res.text()) as SearchResponse;\r\n\r\n        return data.items;\r\n    }\r\n\r\n    const getVideoResponse = async (videoID: string, parts: SearchParts[] = ['snippet']) => (await getVideosResponse([videoID], parts))[0];\r\n\r\n    const getSearchVideoResponse = async (channelID: string, pageToken: string | undefined, results = 50) => {\r\n        results = Math.min(50, Math.max(0, results));\r\n        const pageTokenQuery = pageToken == null ? '' : `&pageToken=${pageToken}`;\r\n        const url = `https://youtube.googleapis.com/youtube/v3/search?type=video&part=snippet&channelId=${channelID}&maxResults=${results}&order=date&key=${API_KEY}${pageTokenQuery}`;\r\n\r\n        const res = await fetch(url);\r\n        return JSON.parse(await res.text()) as SearchResponse;\r\n    }\r\n\r\n    const getChronologicVideoRange = (channelID: string, videoID: string, rangeCount = 10, filter: VideoFilter) => {\r\n        let pageToken : string | undefined\r\n        let targetIterations = 10;\r\n        let isFirst = true;\r\n\r\n        const isTargetVideo = (v: VideoResponseSmall) => v.id === videoID\r\n\r\n        const createTarget = (ids: VideoResponseSmall[]) => {\r\n            const index = ids.findIndex(isTargetVideo);\r\n\r\n            return index > -1\r\n                ? ids.slice(Math.max(0, index - rangeCount), Math.min(index + rangeCount + 1, ids.length))\r\n                : [];\r\n        };\r\n\r\n        const searchNext = async (results = 50) : Promise<VideoResponseSmall[]> => {\r\n            const data = await getSearchVideoResponse(channelID, pageToken, results);\r\n\r\n            if (isFirst) {\r\n                isFirst = false;\r\n                targetIterations = Math.floor(data.pageInfo.totalResults / results);\r\n            }\r\n\r\n            pageToken = data.nextPageToken;\r\n\r\n            const videoIds = data.items.map(v => v.id.videoId);\r\n            const videosWithDetails = await getVideosResponse(videoIds, ['contentDetails']);\r\n\r\n            return videosWithDetails\r\n                .map(v => ({ id: v.id.videoId, details: v.contentDetails }))\r\n                .filter(filter);\r\n        }\r\n\r\n        const findBigRange = async () => {\r\n            let i = 0;\r\n            let cache : VideoResponseSmall[] = [];\r\n\r\n            const fetchNextList = async () => {\r\n                const current = await searchNext();\r\n                current.forEach(v => cache.push(v));\r\n\r\n                return current;\r\n            }\r\n    \r\n            for (; i < targetIterations; i++) {\r\n                if((await fetchNextList()).find(isTargetVideo) != null) break;\r\n            }\r\n                \r\n            for (; i < targetIterations; i++) {\r\n                if(countStarting(cache, isTargetVideo) - 1 >= rangeCount) break;\r\n                await fetchNextList();\r\n            }\r\n\r\n            return cache;\r\n        }\r\n\r\n        const main = async () => {\r\n            const bigRange = await findBigRange();\r\n            return createTarget(bigRange);\r\n        }\r\n\r\n        return main();\r\n    }\r\n\r\n    const getChannelID = async (videoID: string) => (await getVideoResponse(videoID, ['snippet'])).snippet!.channelId;\r\n\r\n    return { getChronologicVideoRange, getSearchVideoResponse, getVideoResponse, getVideosResponse, getChannelID }\r\n})();\r\n", "export interface DurationValues {\r\n    days: number;\r\n    hours: number;\r\n    minutes: number;\r\n    seconds: number;\r\n    milliseconds: number;\r\n}\r\n\r\nconst parseISOValue = (key: string, source: string) => {\r\n    const parts = source.split(key);\r\n    if(parts.length === 1) return;\r\n\r\n    try {\r\n        const value = Number.parseInt(parts[0]);\r\n        if(Number.isNaN(value)) return;\r\n    \r\n        return value;\r\n    } catch(e) {\r\n        return;\r\n    }\r\n}\r\n\r\nexport class Duration implements DurationValues {\r\n    constructor({\r\n        days = 0,\r\n        hours = 0,\r\n        minutes = 0,\r\n        seconds = 0,\r\n        milliseconds = 0,\r\n    }: Partial<DurationValues>) {\r\n        this._days = days;\r\n        this._hours = hours;\r\n        this._minutes = minutes;\r\n        this._seconds = seconds;\r\n        this._milliseconds = milliseconds;\r\n    }\r\n\r\n    get days() { return this._days; }\r\n\r\n    get hours() { return this._hours; }\r\n\r\n    get minutes() { return this._minutes; }\r\n\r\n    get seconds() { return this._seconds; }\r\n\r\n    get milliseconds() { return this._milliseconds; }\r\n\r\n    get inDays() { return this.inHours / 24 }\r\n\r\n    get inHours() { return this.inMinutes / 60 }\r\n\r\n    get inMinutes() { return this.inSeconds / 60 }\r\n\r\n    get inSeconds() { return this.inMilliseconds / 1000 }\r\n\r\n    get inMilliseconds() {\r\n        return (((this._days * 24) * 60) * 60) * 1000 +\r\n            ((this._hours * 60) * 60) * 1000+\r\n            (this._minutes * 60) * 1000 +\r\n            this._seconds * 1000 +\r\n            this._milliseconds;\r\n    }    \r\n\r\n    private _days: number;\r\n    private _hours: number;\r\n    private _minutes: number;\r\n    private _seconds: number;\r\n    private _milliseconds: number;\r\n\r\n    isLess(other: Duration) { return this.inMilliseconds < other.inMilliseconds }\r\n    \r\n    isMore(other: Duration) { return this.inMilliseconds > other.inMilliseconds }\r\n    \r\n    isEqual(other: Duration) { return this.inMilliseconds === other.inMilliseconds }\r\n\r\n    isLessOrEqual(other: Duration) { return this.isLess(other) || this.isEqual(other) }\r\n    isMoreOrEqual(other: Duration) { return this.isMore(other) || this.isEqual(other) }\r\n\r\n    static fromISO8601 = (source: string) => {\r\n        let [date, time] = source.split('T');\r\n\r\n        date = date.replace('P', '');\r\n\r\n        const years = parseISOValue('Y', date) ?? 0;\r\n        const months = parseISOValue('M', date) ?? 0;\r\n        const days = parseISOValue('D', date) ?? 0;\r\n\r\n        const hours = parseISOValue('H', time) ?? 0;\r\n        const minutes = parseISOValue('M', time) ?? 0;\r\n        const seconds = parseISOValue('S', time) ?? 0;\r\n\r\n        return new Duration({\r\n            days: years * 365 + months * 30 + days,\r\n            hours,\r\n            minutes,\r\n            seconds\r\n        });\r\n    }\r\n}\r\n", "import { Duration } from \"./lib/time/duration\";\r\nimport { VideoResponseSmall } from \"./models/video\";\r\n\r\nexport type VideoFilter = (video: VideoResponseSmall) => boolean;\r\n\r\nconst shortMaxDuration = new Duration({seconds: 59});\r\n\r\nexport type FilterString = 'long' | 'shorts' | 'all';\r\n\r\nexport const filtres = {\r\n    get stringValues() {\r\n        return Object.keys(filtres.values) as unknown as keyof typeof filtres['values']\r\n    },\r\n\r\n    nextFilter(value: FilterString) {\r\n        return this.stringValues[(this.values.indexOf(value) + 1) % this.values.length]\r\n    },\r\n\r\n    values: {\r\n        long: (v) => Duration.fromISO8601(v.details.duration).isMore(shortMaxDuration),\r\n        shorts: (v) => Duration.fromISO8601(v.details.duration).isLessOrEqual(shortMaxDuration),\r\n        all: (_) => true,\r\n    } as Record<FilterString, VideoFilter>\r\n}\r\n", "export const getActiveTabUrl = async () => {\r\n    const [tab] = await chrome.tabs.query({active: true, lastFocusedWindow: true});\r\n    return tab.url;\r\n}\r\n", "export const isYoutube = (url: string) => url.includes('youtube.com');\r\nexport const getVideoID = (url: string) => new URLSearchParams(new URL(url).search).get('v');\r\n\r\nexport const isVideo = (url: string) => getVideoID(url) != null;\r\n", "import { FilterString } from \"../api/filters\";\r\n\r\nexport interface IFilterRepo {\r\n    getValue() : Promise<FilterString>;\r\n    setValue(newValue: FilterString) : Promise<void>;\r\n}\r\n\r\nexport const LocalStorageFilterRepo : IFilterRepo = {\r\n    getValue: async () => (localStorage.getItem('filter') ?? 'long') as FilterString,\r\n    setValue: async (value: string) => localStorage.setItem('filter', value),\r\n}\r\n", "export const $display = (() => {\r\n    const el = document.querySelector('#text-display');\r\n\r\n    const setText = (value: string) => el.textContent = value.trim();\r\n    const setVariant = (variant: string) => {\r\n        el.classList.remove(\r\n            ...Array.from(el.classList.entries())\r\n                .map(([k, v]) => v)\r\n                .filter(v => v.includes('display-text')\r\n            )\r\n        );\r\n        el.classList.add(variant);\r\n    }\r\n\r\n    const text = (value: string) => {\r\n        setText(value);\r\n        setVariant('display-text');\r\n    };\r\n\r\n    const error = (value: string) => {\r\n        setText(value);\r\n        setVariant('display-text-error');\r\n    }\r\n\r\n    const initial = () => text('Previous or next video')\r\n\r\n    return {\r\n        text,\r\n        error,\r\n        initial,\r\n    }\r\n})()\r\n", "export type StateListener<T> = (value: T) => void;\r\n\r\nexport const createState = <T>(initial: T, initialListener?: StateListener<T>) => {\r\n    let _value = initial;\r\n    let subs: StateListener<T>[] = [];\r\n\r\n    const listen = (listener: StateListener<T>) => subs.push(listener);\r\n    const notify = (value: T) => subs.forEach(l => l(value));\r\n\r\n    const setValue = (newValue: T) => {\r\n        _value = newValue;\r\n        notify(_value);\r\n    }\r\n\r\n    const getValue = () => _value;\r\n    const dispose = () => { subs = []; };\r\n\r\n    if(initialListener != null) {\r\n        listen(initialListener);\r\n    }\r\n\r\n    return {\r\n        setValue,\r\n        getValue,\r\n        listen,\r\n        dispose,\r\n    }\r\n}", "import { FilterString } from \"../api/filters\";\r\nimport { createState } from \"../lib/state\";\r\n\r\nexport const $filterButton = (() => {\r\n    const button = document.querySelector('#video-type');\r\n\r\n    const state = createState<FilterString | null>(null, (newValue) => {\r\n        button.textContent = newValue;\r\n    });\r\n\r\n    return {\r\n        button,\r\n        setFilterValue: state.setValue,\r\n        listen: state.listen,\r\n    }\r\n})()\r\n", "export const $targetButtons = (() => {\r\n    const previousButton = document.querySelector('#video-previous') as HTMLButtonElement;\r\n    const nextButton = document.querySelector('#video-next') as HTMLButtonElement;\r\n\r\n    const deactivate = () =>\r\n        [previousButton, nextButton].forEach(b => {\r\n            b.classList.replace('btn', 'buttons__button-inactive');\r\n            b.disabled = true;\r\n        });\r\n    \r\n    const activate = () =>\r\n        [previousButton, nextButton].forEach(b => {\r\n            b.classList.replace('buttons__button-inactive', 'btn');\r\n            b.disabled = false;\r\n        });\r\n\r\n    return {\r\n        deactivate,\r\n        activate,\r\n        nextButton,\r\n        previousButton,\r\n    }\r\n})()\r\n", "import { youtubeAPI } from \"./api/api\";\r\nimport { FilterString, filtres } from \"./api/filters\";\r\nimport { getActiveTabUrl } from \"./lib/chromeAPI\";\r\nimport { getVideoID, isVideo, isYoutube } from \"./lib/youtube\";\r\nimport { IFilterRepo, LocalStorageFilterRepo } from \"./repo/filterRepo\";\r\nimport { $display } from \"./viewElements/display\";\r\nimport { $filterButton } from \"./viewElements/filterButton\";\r\nimport { $targetButtons } from \"./viewElements/targetButtons\";\r\n\r\ntype Mode = 'next' | 'previous';\r\n\r\ntype Args = {\r\n    mode: Mode;\r\n    filter?: FilterString;\r\n}\r\n\r\nexport const execute = ({ mode, filter = 'long' }: Args) => {\r\n    $display.initial();\r\n\r\n    const getTargetVideoID = (rootID: string, data: string[]) => {\r\n        const target = data[mode === 'next' ? 0 : data.length - 1];\r\n\r\n        if (target !== rootID) return target;\r\n\r\n        const message = mode === 'next'\r\n            ? 'It\\'s last video'\r\n            : 'It\\'s first video';\r\n\r\n        $display.error(message);\r\n    }\r\n    \r\n    const openVideo = (url: string, id: string) => {\r\n        const tabUrl = new URL(url);\r\n        window.open(tabUrl.origin + tabUrl.pathname + `?v=${id}`, '_blank')\r\n    }\r\n\r\n    const main = async () => {\r\n        const url = await getActiveTabUrl();\r\n\r\n        if (!isYoutube(url) || !isVideo(url)) return;\r\n\r\n        const videoID = getVideoID(url);\r\n        const channelID = await youtubeAPI.getChannelID(videoID);\r\n\r\n        const res = (await youtubeAPI.getChronologicVideoRange(\r\n            channelID,\r\n            videoID,\r\n            1,\r\n            filtres.values[filter] ?? filtres.values.long\r\n        )).map(v => v.id);\r\n\r\n        if (res.length === 0) {\r\n            $display.error('Not found');\r\n            return;\r\n        }\r\n\r\n        const id = getTargetVideoID(videoID, res);\r\n        if(id == null) return;\r\n\r\n        openVideo(url, id);\r\n    }\r\n\r\n    return main();\r\n}\r\n\r\nconst repo: IFilterRepo = LocalStorageFilterRepo;\r\n\r\nconst subscribeTargetButtons = () => {\r\n    const onTargetButtonClick = async (mode: Mode) => {\r\n        $targetButtons.deactivate();\r\n        await execute({ mode, filter: await repo.getValue()});\r\n        $targetButtons.activate();\r\n    }\r\n\r\n    $targetButtons.nextButton.addEventListener('click', () => onTargetButtonClick('next'));\r\n    $targetButtons.previousButton.addEventListener('click', () => onTargetButtonClick('previous'));\r\n}\r\n\r\nconst subscribeFilterButton = () => {\r\n    $filterButton.listen(v => $filterButton.setFilterValue(v));\r\n\r\n    const setNextFilter = async () => {\r\n        const current = await repo.getValue();\r\n        const next = filtres.nextFilter(current);\r\n\r\n        return $filterButton.setFilterValue(next);\r\n    }\r\n\r\n    $filterButton.button.addEventListener('click', setNextFilter);\r\n}\r\n\r\nconst init = () => {\r\n    subscribeTargetButtons();\r\n    subscribeFilterButton();\r\n    $display.initial();\r\n}\r\n\r\ninit();\r\n"],
  "mappings": "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",
  "names": ["joinParams", "parts", "youtubeAPI", "API_KEY", "getVideosResponse", "videosIDs", "parts", "url", "joinParams", "res", "getVideoResponse", "videoID", "getSearchVideoResponse", "channelID", "pageToken", "results", "pageTokenQuery", "rangeCount", "filter", "targetIterations", "isFirst", "isTargetVideo", "v", "createTarget", "ids", "index", "searchNext", "data", "videoIds", "findBigRange", "i", "cache", "fetchNextList", "current", "bigRange", "parseISOValue", "key", "source", "parts", "value", "Duration", "_Duration", "days", "hours", "minutes", "seconds", "milliseconds", "other", "date", "time", "years", "months", "shortMaxDuration", "Duration", "filtres", "value", "v", "_", "getActiveTabUrl", "tab", "isYoutube", "url", "getVideoID", "isVideo", "LocalStorageFilterRepo", "value", "$display", "el", "setText", "value", "setVariant", "variant", "k", "v", "text", "createState", "initial", "initialListener", "_value", "subs", "listen", "listener", "notify", "value", "l", "setValue", "newValue", "getValue", "dispose", "$filterButton", "button", "state", "createState", "newValue", "$targetButtons", "previousButton", "nextButton", "b", "execute", "mode", "filter", "$display", "getTargetVideoID", "rootID", "data", "target", "message", "openVideo", "url", "id", "tabUrl", "getActiveTabUrl", "isYoutube", "isVideo", "videoID", "getVideoID", "channelID", "youtubeAPI", "res", "filtres", "v", "repo", "LocalStorageFilterRepo", "subscribeTargetButtons", "onTargetButtonClick", "$targetButtons", "subscribeFilterButton", "$filterButton", "setNextFilter", "current", "next", "init"]
}
